version: "3.8"

name: hackmate_services

# Define a reusable environment configuration for team services
x-team-service-env: &team-service-env
  TEAM_DB: ${TEAM_DB}
  TEAM_DB_USER: ${TEAM_DB_USER}
  TEAM_DB_PASSWORD: ${TEAM_DB_PASSWORD}
  TEAM_DB_HOST: team-db
  TEAM_DB_PORT: ${TEAM_DB_PORT:-5432}
  TEAM_SERVICE_SECRET_KEY: ${TEAM_SERVICE_SECRET_KEY}
  JWT_SECRET_KEY: ${JWT_SECRET_KEY}
  RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
  PYTHONPATH: ./team_service

services:
  user-db:
    image: postgres
    environment:
      POSTGRES_DB: ${USER_DB}
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  team-db:
    image: postgres
    environment:
      POSTGRES_DB: ${TEAM_DB}
      POSTGRES_USER: ${TEAM_DB_USER}
      POSTGRES_PASSWORD: ${TEAM_DB_PASSWORD}
    volumes:
      - team_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  user-service:
    build: ../user-service/
    volumes:
      - ../user-service:/usr/local/app
    ports:
      - "8001:8000"
    environment:
      DATABASE_URL: ${USER_DB_URL}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME}
      AWS_S3_REGION_NAME: ${AWS_S3_REGION_NAME}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      USER_SERVICE_SECRET_KEY: ${USER_SERVICE_SECRET_KEY}
    depends_on:
      user-db:
        condition: service_healthy

  # Dedicated migration container for team-service
  team-service-migrate:
    build: ../team-service/
    command: python team_service/manage.py migrate
    volumes:
      - ../team-service:/usr/local/app
    environment:
      <<: *team-service-env
    depends_on:
      team-db:
        condition: service_healthy
    restart: "no"

  team-service:
    build: ../team-service/
    volumes:
      - ../team-service:/usr/local/app
    ports:
      - "8002:8000"
    environment:
      <<: *team-service-env
      RUN_MIGRATIONS: "false"
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME}
      AWS_S3_REGION_NAME: ${AWS_S3_REGION_NAME}
    depends_on:
      team-db:
        condition: service_healthy
      team-service-migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 10

  team-consumer:
    build: ../team-service/
    command: python team_service/consumers/user_sync.py
    restart: on-failure
    volumes:
      - ../team-service:/usr/local/app
    environment:
      <<: *team-service-env
      RUN_MIGRATIONS: "false"
    depends_on:
      rabbitmq:
        condition: service_healthy
      team-db:
        condition: service_healthy
      team-service-migrate:
        condition: service_completed_successfully

  team-consumer-skill:
    build: ../team-service/
    command: python team_service/consumers/skill_sync.py
    restart: on-failure
    volumes:
      - ../team-service:/usr/local/app
    environment:
      <<: *team-service-env
      RUN_MIGRATIONS: "false"
    depends_on:
      rabbitmq:
        condition: service_healthy
      team-db:
        condition: service_healthy
      team-service-migrate:
        condition: service_completed_successfully

  notification-db:
    image: postgres
    environment:
      POSTGRES_DB: ${NOTIFICATION_DB}
      POSTGRES_USER: ${NOTIFICATION_DB_USER}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
    volumes:
      - notification_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  notification-service:
    build: ../notification-service/
    volumes:
      - ../notification-service:/usr/local/app
    ports:
      - "8003:8000"
    environment:
      NOTIFICATION_DB: ${NOTIFICATION_DB}
      NOTIFICATION_DB_USER: ${NOTIFICATION_DB_USER}
      NOTIFICATION_DB_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
      NOTIFICATION_DB_HOST: notification-db
      NOTIFICATION_DB_PORT: ${NOTIFICATION_DB_PORT:-5432}
      NOTIFICATION_SERVICE_SECRET_KEY: ${NOTIFICATION_SERVICE_SECRET_KEY}
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
      PYTHONPATH: ./notification_service
      RUN_MIGRATIONS: "true"
    depends_on:
      notification-db:
        condition: service_healthy

  notification-consumer:
    build: ../notification-service/
    command: python notification_service/notification_service/rabbitmq/consumer_notification.py
    restart: on-failure
    volumes:
      - ../notification-service:/usr/local/app
    environment:
      NOTIFICATION_DB: ${NOTIFICATION_DB}
      NOTIFICATION_DB_USER: ${NOTIFICATION_DB_USER}
      NOTIFICATION_DB_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
      NOTIFICATION_DB_HOST: notification-db
      NOTIFICATION_DB_PORT: ${NOTIFICATION_DB_PORT:-5432}
      NOTIFICATION_SERVICE_SECRET_KEY: ${NOTIFICATION_SERVICE_SECRET_KEY}
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
      PYTHONPATH: ./notification_service
    depends_on:
      notification-service:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  team-celery-worker:
    build: ../team-service/
    command: celery -A team_service.celery_app worker --loglevel=info --queues=team-tasks
    restart: on-failure
    volumes:
      - ../team-service:/usr/local/app
    environment:
      <<: *team-service-env
      RUN_MIGRATIONS: "false"
    depends_on:
      rabbitmq:
        condition: service_healthy
      team-db:
        condition: service_healthy
      team-service-migrate:
        condition: service_completed_successfully

  team-celery-beat:
    build: ../team-service/
    command: celery -A team_service.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    restart: on-failure
    volumes:
      - ../team-service:/usr/local/app
    environment:
      <<: *team-service-env
      RUN_MIGRATIONS: "false"
    depends_on:
      rabbitmq:
        condition: service_healthy
      team-db:
        condition: service_healthy
      team-service-migrate:
        condition: service_completed_successfully


volumes:
  pgdata:
  team_pgdata:
  notification_pgdata: